// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProvaConceito.Models.Contexto;

namespace ProvaConceito.Migrations
{
    [DbContext(typeof(JornadaTIContexto))]
    [Migration("20200806151158_DadosIniciais")]
    partial class DadosIniciais
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProvaConceito.Models.ModelosNegocio.Pergunta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Perguntas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Você gosta de testar aplicações?"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Você gosta de desenhar telas para as aplicações?"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Você gosta de aprender novas linguagens e frameworks?"
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Qual das seguintes personalidades mais te inspira?"
                        });
                });

            modelBuilder.Entity("ProvaConceito.Models.ModelosNegocio.Profissao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Profissoes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "QA"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "UX"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Desenvolvedor"
                        });
                });

            modelBuilder.Entity("ProvaConceito.Models.ModelosNegocio.Resposta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PerguntaId")
                        .HasColumnType("int");

                    b.Property<int>("ProfissaoId")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PerguntaId");

                    b.HasIndex("ProfissaoId");

                    b.ToTable("Respostas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PerguntaId = 1,
                            ProfissaoId = 1,
                            Texto = "Sou fanático por testes!"
                        },
                        new
                        {
                            Id = 2,
                            PerguntaId = 1,
                            ProfissaoId = 2,
                            Texto = "Gosto de testar idéias com o usuário!"
                        },
                        new
                        {
                            Id = 3,
                            PerguntaId = 1,
                            ProfissaoId = 3,
                            Texto = "Testar não é minha praia definitivamente!"
                        },
                        new
                        {
                            Id = 4,
                            PerguntaId = 2,
                            ProfissaoId = 1,
                            Texto = "Não gosto de desenhos de telas!"
                        },
                        new
                        {
                            Id = 5,
                            PerguntaId = 2,
                            ProfissaoId = 2,
                            Texto = "Acho incrível e me interesso em entender o usuário cada vez mais!"
                        },
                        new
                        {
                            Id = 6,
                            PerguntaId = 2,
                            ProfissaoId = 3,
                            Texto = "Até acho legal ver a concepção das telas!"
                        },
                        new
                        {
                            Id = 7,
                            PerguntaId = 3,
                            ProfissaoId = 1,
                            Texto = "Acho legal usar frameworks para teste de aplicações."
                        },
                        new
                        {
                            Id = 8,
                            PerguntaId = 3,
                            ProfissaoId = 2,
                            Texto = "Detesto trabalhar com tecnologias."
                        },
                        new
                        {
                            Id = 9,
                            PerguntaId = 3,
                            ProfissaoId = 3,
                            Texto = "Acho fantástico!"
                        },
                        new
                        {
                            Id = 12,
                            PerguntaId = 4,
                            ProfissaoId = 1,
                            Texto = "Thomas Edison"
                        },
                        new
                        {
                            Id = 11,
                            PerguntaId = 4,
                            ProfissaoId = 2,
                            Texto = "Steve Jobs"
                        },
                        new
                        {
                            Id = 10,
                            PerguntaId = 4,
                            ProfissaoId = 3,
                            Texto = "Bill Gates"
                        });
                });

            modelBuilder.Entity("ProvaConceito.Models.ModelosNegocio.Resposta", b =>
                {
                    b.HasOne("ProvaConceito.Models.ModelosNegocio.Pergunta", "Pergunta")
                        .WithMany("Respostas")
                        .HasForeignKey("PerguntaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProvaConceito.Models.ModelosNegocio.Profissao", "Profissao")
                        .WithMany("RespostasAssociadas")
                        .HasForeignKey("ProfissaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
